/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */


/** buildscript 中的声明是 gradle 脚本自身需要使用的资源
 * buildscript 代码块要放在 plugins 代码块前面
 */
buildscript {

	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	
	
	// gradle 脚本自身需要的远程库
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	
	// gradle 脚本自身需要的第三方依赖
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

	}

}


/* 添加插件支持： plugins 代码块必须放在本文件顶部 */
plugins {
    id "base"           // gradle 基本插件
    id "java"           // java 项目需要添加的插件
    id 'war'            // web 项目需要添加的插件
    id 'application'    // 普通 java 应用需要添加的插件
}



task hello(group: "Custom", description: "My first task"){
    println "Hello Gradle!"
}

/** 创建一个任务，名为 copy
 */
task copy(type: Copy, group: "Custom", description: "Copies sources to the dest directory") {
    from "src"
    into "dest_运行时创建的"
}


/** 创建一个需要插件的任务，名为 zip
 * 需要添加插件 base
 * 创建的压缩文件保存在 build/distributions 目录下
 */
task zip(type: Zip, group: "Archive", description: "Archives sources in a zip file") {
    from "src"
    setArchiveName "basic-demo-1.0.zip"
}


/** 自定义属性，供其他代码调用
 */
ext {
    springVersion = "5.0.0"
}


/** 添加第三方依赖仓库 */
repositories {

    jcenter()           // jcenter 仓库
    mavenCentral()      // maven 中央仓库
    maven { url "http://central.maven.org/maven2/" }
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://maven.aliyun.com/repository/jcenter" }
    
    mavenLocal()		// maven 本地仓库
    flatDir {  // 添加本地目录
        dirs 'E:\\libA', 'libB'   // 绝对路径和相对路径，相对路径相对当前文件
    }
}


/** 添加项目所需的第三方依赖 */
dependencies {

    compile (
        "org.neo4j.driver:neo4j-java-driver:1.6.1",
    )
	
    compile files(
        'lib/ojdbc-14.jar'  // 加载一个 jar 文件
    )
    compile fileTree(
        dir:'libs',include:['*.jar'] // 加载一个目录下的 jar 文件
    )
	
    // 添加 war 插件才有的配置
    providedCompile (
        'javax.servlet:javax.servlet-api:3.1.0'
    )
    
	
    // runtime ()

    
    
    // 添加 war 插件才有的配置
    // provideRuntime ()
    
    
    
    testCompile (
        "org.junit.jupiter:junit-jupiter-api:5.3.1",
        "org.junit.jupiter:junit-jupiter-engine:5.3.1",
    )
   
}



