################################ 0. 简介
Vim 模式
    Normal        => 常规模式： 'a|i' 进入编辑模式  ':' 进入命令模式  'v' 进入视图模式
    Edit          => 编辑模式：ESC 退出到常规模式
    Command       => 命令模式：ESC 退出到常规模式
    Visual        => 视图模式：ESC 退出到常规模式
    Select        => 视图模式下按 Ctrl + G 进入，该模式选择可以拖动鼠标

Vim 范围参数
    Space  ：光标所在位置字符
    重复某些动作命令  ：光标所在行，如 dd yy == >>
    $ : 从光标起始位置到行尾
    ^ : 从光标起始位置到行首，不包含缩进空白
    0 ：从光标起始位置到行首，包含缩进空白
    gg : 从光标位置到文件头
    G ：从光标位置到文件尾
    % ：从光标位置到另一边的匹配括号
    t<字符> ：从光标位置到右边首次出现该字符的位置，包括该字符
    f<字符> ：从光标位置到右边首次出现该字符的位置，包括该字符
    F<字符> ： 
    /正则表达式 ：从光标位置到下一个正则表达式匹配的字符串
    ?正则表达式 ：从光标位置到下一个正则表达式匹配的字符串
        
    aw - 一个单词加一个空格 （a可理解为“一个”，下同） 
    iw - 一个单词 （i可理解为in，下同） 
    a" - 一个字符串包括双引号 
    i" - 一个字符串内部文本 
    a< - 一组< >包含的文本，包括< >号本身 
    同理类推： i<, a[, i[, a(, i(   


范围参数命令
    d<范围>       // 删除一定范围内的文本
    y<范围>
    v<范围>
    =<范围>
    gU<范围>
    gu<范围>
    ><范围>
    <<范围>
    
################################ Normal 模式下常用命令
    a                           # 之后插入，进入 Edit 模式
    A                           # 之后插入，且光标移动到行尾，进入 Edit 模式
    i                           # 之前插入，进入 Edit 模式
    I                           # 之前插入，且光标移动到行首，进入 Edit 模式
    :                           # 进入 Command 模式
    v                           # 进入 Visual 行模式
    ggvG                        # 进入 Visual 行模式，全选
    Ctrl+V                      # 进入 Visual 块模式
    
    u           # 撤销上一步操作
    Ctrl+R      # 恢复撤销的操作  

################################ Command 模式下常用命令
    :w                                  # 保存当前文件
    :w fileName                         # 当前文件另存为 fileName，保存路径为当前路径
    :wq                                 # 保存并关闭当前文件，更新文件最后修改时间属性
    :q!                                 # 不保存，并退出 vim
    :x                                  # 如果修改过则保存并关闭，否则直接关闭，不更新文件最后修改时间属性
    
    :set number                         # 临时显示行号
    :67                                 # 光标移动到 67 行       

    :reg        # 查看所有寄存器中的值
    :reg ""     # 查看 "" 寄存器的值
    
    ：shell                  # 不退出 vim 执行 shell 命令
    ：exit                   # 执行完 shell 命令回到 vim
    
################################ Edit 模式下常用命令
    Shift+Insert        # 插入系统剪贴板的内容
    
################################ Visual 行模式下常用命令

################################ Visual 块模式下常用命令
    插入列 {
        1. 光标定位到要操作的地方。
        2. CTRL+V 进入“可视 块”模式，选取这一列操作多少行。
        3. SHIFT+I 输入要插入的内容。
        4. ESC 按两次，会在每行的选定的区域出现插入的内容。
    }
    
     
################################ 2. 光标移动
    h           # 左
    j           # 下
    k           # 上
    l           # 右
    
    gg          # 光标移动到第一行行首
    0           # 光标移动到行首
    ^           # 光标移动到首个非空白字符
    $           # 光标移动到行尾
    :67         # 跳转到 67 行
    9G          # 光标移至第 9 行行首，如果没有数字则移动到最后一行
    
    zt          # 让光标所在的行居屏幕最上一行 t=top
    zz          # 让光标所在的行居屏幕中央    
    zb          # 让光标所在的行居屏幕最下一行 b=bottom
    
    Ctrl+U      # 向上翻半页
    Ctrl+D      # 向下翻半页
    9Ctrl+F     # 向下翻页, 9 表示翻 9 页
    9Ctrl+B     # 向上翻页, 9 表示翻 9 页    
  
    o           # Visual # 令光标在选区的两端切换 
    O           # Visual # 令光标在同行选区首尾切换
  
  
################################ 3. 插入
    i           # insert 在当前字符前面，开始插入
    a           # append 在当前字符后面，开始插入
    o           # 在光标所在行下面另起一行，开始插入
    s           # 删除当前光标下，或当前选中的字符，并开始插入
    x           # 删除当前光标下，或当前选中的字符

    I           # 在当前光标所在行，行首插入
    A           # 在当前光标所在行，行尾插入
    O           # 在当前光标所在行，上面另起一行
    S           # 删除当前光标所在行，并开始插入
  
################################ 4. 撤销、恢复
    u           # 撤销上一步操作
    Ctrl+R      # 恢复撤销的操作  
  

################################ 5. 查找、替换
    
    # 查找替换命令中的各种符号的含义
    0（数字）                      # 表示文件第 n 行
    $                           # 表示文件最后一行
    .                           # 表示当前光标所在行
    'm                          # 表示标记 m 所在的行
    '<                          # 表示选择区的第一行
    '>                          # 表示选择区的最后一行
    %                           # 表示整个文本（相当于 1,$)
    
    # 查找替换命令中，正则表达式修饰符含义
    g       # 全不匹配，如果没有，只匹配第一个
    i       # 忽略大小写
    c       # 每一个替换前都询问
    

    # 取消搜索后的高亮显示
    :nohl


    # 查找、替换
    /pattern                    # 除了 $ ^ 之外其他元字符都要加反斜杠
    /\mpattern                  # 除了 $ . * ^ 之外其他元字符都要加反斜杠                 
    /\vpattern                  # \v 表示完全符合正则表达式
    
    /kasei                      # 查找 kasei， n/N 移动
    ?kasei                      # 查找 kasei， n/N 移动
    :/?abc*h                    # 查找字符串 "?abc*h"

    :s/str1/str2                # 表示将当前行第一个 str1 替换成 str2
    :s/str1/str2/g              # 表示将当前行所有 str1 替换成 str2

    :%s/s1/s2                   # 表示将当前文件中每一行的第一个 str1 替换成 str2
    :%s/s1/s2/g                 # 表示将当前文件中所有 str1 替换成 str2
    :9,$s/old/new/g             # 从第9行到最后一行
    :.,$s/old/new/g             # 从当前行到最后一行
    :1,$s/old/new/g             # 从第一行到最后一行每一行的第一个   
    :'<,'>s/old/new/g           # 在选中区域替换文本

    :s+vivian/+sky/             # 把分隔符从 / 替换为 + 这样 / 就能被识别出来 
    
    
################################ 6. 复制、粘贴、剪切、删除

    # 选择             
    v                       // 进入视图模式，字符选择模式，用移动光标命令，移动光标进行选择
    Ctrl+V                  // 进入视图模式，块选择模式
    ggVG                    // 全选


    # 方式一： 通过视图模式操作
    v           # 进入视图模式，光标移动命令移动光标，进行选择
    x                           # 删除，可以直接使用
    d                           # 删除，需要先选择范围
    y                           # 复制选中的内容
    "+x         # 删除，内容保存到 "+ 寄存器
    "+d         # 删除，内容保存到 "+ 寄存器，不能单独用
    "+y         # 复制，内容保存到 "+ 寄存器


    # 方式二： 普通模式下直接操作
    8yy         # 复制 8 行  
    8dd         # 删除 8 行
    
    # 方式三：编辑模式下
    :set paste      # 原样粘贴，不自动缩进
    Shift+Insert     # 直接粘贴系统剪贴板的内容
    :set nopaste     # 重新开启缩进

    # 粘贴
    :reg        # 查看所有寄存器中的值
    :reg ""     # 查看 "" 寄存器的值
    p           # 把寄存器中的内容粘贴到光标之后
    "+p         # 粘贴 "+ 寄存器的内容     
    P           # 把寄存器中的内容粘贴到光标之前


################################ 7. 骚操作
# 大小写转换
    v       # 进入视图模式选择
    u                           # 变小写
    U                           # 变大写
    ~                           # 大小写反转

# 合并下一行
    J           # 合并下一行到当前行

# 打书签
    m<a-z>            # 给当前光标位置打书签
    `<a-z>            # 跳转到书签位置
    m<A-Z>            # 全局书签    
 

# 缩进
    >           # 缩进一格
    <           # 取消缩进一格
    [9]>>                # 右移一个 Tab，或 9 个
    [9]<<                # 左移一个 Tab，或 9 个    
    ==          # 自动缩进当前行
    
   
# 历史回溯   
    .           # 重复上一次的操作
    &           # 重复上一次的:s替换命令 
    @@          # 重复上一次执行的宏 
    `.          # 跳转到之前修改的位置
    ``          # 在前一次跳转位置与当前位置间切换
    
    
    
    
    



################################ 8. Vim 多窗口模式
    # 开启新的窗口
    ：new windowName             # 打开一个新窗口，保存后，窗口名就是文件名
    ：sp windowName              # 下一条命令的简写
    ：split windowName           # 横向切割出一个新窗口
    ：vsplit windowName          # 纵向切割出一个新窗口
    ：vsp windowName             # 上一条命令的简写
    
    # 窗口重命名
    ：f windowName               # 重命名当前窗口
    
    # 关闭窗口
    ：q!                         # 关闭窗口
    :close                      # 关闭窗口，最后一个窗口不能用，只有使用q!、w!或x才能真能退出
    ：tabc                       # 关闭当前窗口
    :tabo                       # 关闭所有窗口

    # 窗口之间切换
    Ctrl W  H/J/K/L             # 上下左右切换
    Ctrl 方向键                 
    Ctrl W 连按两次             # 依次切换窗口

    # 窗口大小调整
    纵向调整
    Ctrl W +                    # 纵向扩大（行数增加）
    Ctrl W -                    # 纵向缩小 （行数减少）
    :res(ize) num               # 例如：:res 5，显示行数调整为 5 行
    :res(ize)+num               # 把当前窗口高度增加 num 行
    :res(ize)-num               # 把当前窗口高度减少 num 行

    横向调整
    :vertical res(ize) num      # 指定当前窗口为num列
    :vertical res(ize)+num      # 把当前窗口增加num列
    :vertical res(ize)-num      # 把当前窗口减少num列
        
    # 浏览
    :Ex                 # 开启目录浏览器，可以浏览当前目录下的所有文件，并可以选择
    :Sex                # 水平分割当前窗口，并在新窗口中开启目录浏览器
    ：Vex                # 垂直分隔当前窗口，并在新窗口中开启目录浏览器
    

################################ 10. 寄存器
    # 所有寄存器简介
        ""              // 默认寄存器，所有的复制和修改操作（x、s、d、c、y）都会将该数据复制到默认寄存器
        "{a-zA-Z}       // 字母寄存器，大写字母表示将当前内容添加到小写字母寄存器的后面
        "0              // 复制专用寄存器，仅当使用复制操作(y)时，该数据将会同时被复制到默认寄存器和复制专用寄存器。
        "{1-9}          // 逐级缓存寄存器，所有不带范围，如 "(", ")", "{", "}" 的操作涉及 1 行以上的删除修改操作（x、s、d、c）的数据都会复制到逐级临时缓存寄存器，并在新的数据加入时，逐级先后推移。
        "-              // 小删除寄存器，保存不超过一行的删除
        "_              // 黑洞寄存器，放入该寄存器的数据会被直接丢弃
        "+              // 系统剪切板，复制内容到系统，或调用系统复制的内容
        "=              // 表达式寄存器，用于计算表达式，输入完该寄存器应用后，会在命令行里提示“=”，按需输入表达式，结果将会显示到光标处。 Ctrl - r = 之后输入 system('ls') <enter> 来显示 ls 的结果。
        "*              // unknow
        "~              // unknow
        "%              // 当前文件路径
        "/              // 搜索寄存器，上次查找的内容
        ".              // 上次插入的内容
        ":              // 命令寄存器，上次执行的命令


    # 寄存器操作
    :reg                        # 查看所有寄存器当前的值
    :reg ""                     # 查看 "" 寄存器的值
    




################################ 999. Vim 编程        























