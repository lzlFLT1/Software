{
    /** todo 日志配置 */
    "log": {
        "access": "/tmp/v2ray/v2ray-access.log",        // 访问日志文件路径： 如果不指定，那么输出到 stdout
        "error": "/tmp/v2ray/v2ray-error.log",          // 错误日志文件路径： 如果不指定，那么输出到 stdout
        "loglevel": "warning"                           // 日志级别： "debug" | "info" | "warning" | "error" | "none"
    },
    
    
    /** todo 开放一些 API 供远程调用，所有 API 都基于 gRPC */
    "api": {    
        "tag": "api",                   // 出站代理标识符
        "services": [                   // 开启的 API 列表
            "HandlerService",
            "LoggerService",
            "StatsService"
        ]
    },
    
    
    /** todo 内置的 DNS 服务器，若此项不存在，则默认使用本机的 DNS 设置 */
    "dns": {
        "hosts": {  // 静态域名 IP 映射表
            "baidu.com": "127.0.0.1",               // 纯字符串： 完整匹配
            "regexp:\\.goo.*\\.com$":"8.8.8.8",     // Regular Expression 匹配，注意 \\. 就标识一个 .  因为 \ 是 JSON 转义字符
            "domain::v2ray.com":"",                 // 子域名匹配，匹配 v2ray.com  www.v2ray.com  aa.v2ray.com 等，但是不匹配 x2ray.com   
            "keyword:sina.com":"",                  // 子串匹配，只要目标域名中包含该字符串则匹配
            
            /** todo 预定义域名列表匹配，此列表由 domain-list-community 项目维护，预置于每一个 V2Ray 的安装包中，文件名为 geosite.dat。
             * category-ads: 包含了常见的广告域名。
             * category-ads-all: 包含了常见的广告域名，以及广告提供商的域名。
             * cn: 相当于 geolocation-cn 和 tld-cn 的合集。
             * google: 包含了 Google 旗下的所有域名。
             * facebook: 包含了 Facebook 旗下的所有域名。
             * geolocation-cn: 包含了常见的国内站点的域名。
             * geolocation-!cn: 包含了常见的非国内站点的域名。
             * speedtest: 包含了所有 Speedtest 所用的域名。
             * tld-cn: 包含了所有 .cn 和 .中国 结尾的域名。
             * */
            "geosite:google":""                     
        },
        "servers": [{ // DNS 服务器配置，若要使 DNS 服务生效，需要配置路由功能中的 domainStrategy。
            "address": "1.2.3.4",               // DNS 服务器地址，
            "port": 5353,                       // DNS 服务器端口
            "domains": [                        // 域名列表，此列表包含的域名，将优先使用该 DNS 服务器解析。域名格式跟 hosts 中一致
                "domain:v2ray.com"
            ]},
            "8.8.8.8",
            "8.8.4.4",
            "localhost"
        ],
        "clientIp": "1.2.3.4",                  // 当前系统的 IP 地址，用于 DNS 查询时，通知服务器客户端的所在位置。不能是私有地址。
        "tag": "dns_inbound"                    // 由此 DNS 发出的查询流量，除 localhost 外，都会带有此标识，可在路由使用 inboundTag 进行匹配。
    },
    
    
    /** todo 入站协议 数据转发到哪个 出站协议 的判定规则 */
    "routing": {
        /** 域名解析策略 
         * "AsIs": 只使用域名进行路由选择。默认值。
         * "IPIfNonMatch": 当域名没有匹配任何规则时，将域名解析成 IP（A 记录或 AAAA 记录）再次进行匹配；
         *      当一个域名有多个 A 记录时，会尝试匹配所有的 A 记录，直到其中一个与某个规则匹配为止；
         *      解析后的 IP 仅在路由选择时起作用，转发的数据包中依然使用原始域名；
         * "IPOnDemand": 当匹配时碰到任何基于 IP 的规则，将域名立即解析为 IP 进行匹配；
         */
        "domainStrategy": "AsIs",               //   "AsIs" | "IPIfNonMatch" | "IPOnDemand"
        /** 对应一个数组，数组中每个元素是一个规则。对于每一个连接，路由将根据这些规则依次进行判断，当一个规则生效时，即将这个连接转发至它所指定的outboundTag（或 balancerTag），当没有匹配到任何规则时，流量默认由主出站协议发出。
         * */
        "rules": [
            {
                "type": "field",                // 目前只支持 field 选项
                "domain": [                     // 数组每一项是一个域名的匹配
                    "baidu.com",                // 纯字符串： 当此字符串匹配目标域名中任意部分，该规则生效。相当于 hosts 中的子串匹配
                    "regexp:\\.goo.*\\.com$",
                    "domain:v2ray.com",
                    "full:v2ray.com",           // 全匹配： 相当于 hosts 中的纯字符串
                    "geosite:cn",
                    "ext:file:tag"              // 从文件中加载域名: 必须以ext:（小写）开头，后面跟文件名和标签，文件存放在资源目录中，文件格式与geosite.dat相同，标签必须在文件中存在。
                ],
                /* 数组内每一个元素代表一个 IP 范围。当某一元素匹配目标 IP 时，此规则生效 */
                "ip": [
                    "127.0.0.1",                // IP 模式： 
                    "0.0.0.0/8",                // CIDR 模式： 
                    "10.0.0.0/8",               // CIDR 模式： 
                    "fc00::/7",
                    "fe80::/10",
                    "ext:file:tag",             // 从文件中加载 IP: 后面跟文件名和标签，文件存放在 资源目录(V2RAY_LOCATION_ASSET 环境变量所指的目录，默认值和 v2ray 文件同路径) 中，文件格式与geoip.dat相同标签必须在文件中存在
                    "geoip:private",            // GeoIP 模式： 特殊值，包含所有私有地址
                    "geoip:cn"                  // GeoIP 模式： 后面跟双字符国家代码
                ],
                /* 端口匹配 */
                "port": "53,443,1000-2000",
                /* 数据包格式匹配 */
                "network": "tcp",               // "tcp" | "udp" | "tcp,udp"       
                /* 数组内每一个元素是一个 IP 或 CIDR。当某一元素匹配来源 IP 时，此规则生效 */
                "source": [
                    "10.0.0.1"
                ],
                /* 数组内每一个元素是一个邮箱地址。当某一元素匹配来源用户时，此规则生效。当前 Shadowsocks 和 VMess 支持此规则 */
                "user": [
                    "love@v2ray.com"
                ],
                /* 入站协议匹配： 当某一元素匹配入站协议的标识时，此规则生效 */
                "inboundTag": [
                    "tag-vmess"
                ],
                /* 协议匹配： 当某一个协议匹配当前连接的流量时，此规则生效。必须开启入站代理中的 sniffing 选项。 */
                "protocol":["http", "tls", "bittorrent"],
                /* 一段脚本，用于检测流量的属性值。当此脚本返回真值时，此规则生效。脚本语言为 Starlark,目前只有 http 入站代理会设置这一属性 */
                "attrs": "attrs[':method'] == 'GET'",
                /* 此规则对应的出站协议 */
                "outboundTag": "direct",
                /* 对应一个负载均衡器的标识。balancerTag和outboundTag须二选一。当同时指定时，outboundTag生效。 */
                "balancerTag": "balancer"
            }
        ],
        /** 数组中每个元素是一个负载均衡器的配置。当一个规则指向一个负载均衡器时，V2Ray 会通过此负载均衡器选出一个出站协议，然后由它转发流量 */
        "balancers": [
            {
                "tag": "balancer",  // 该负载均衡器标识符
                "selector": ["a", "ab", "c", "ba"]      // 字符串数组，其中每一个字符串将用于和出站协议标识的前缀匹配。如果匹配到多个出站协议，负载均衡器目前会从中随机选出一个作为最终的出站协议
            }
        ]
    },
    
    
    /** todo V2Ray 处理的每一个连接，都对应到一个用户，按照这个用户的等级（level）应用不同的策略。本地策略可按照等级的不同而变化 */
    "policy": {
        "levels": {
            /** 一组键值对，每个键是一个字符串形式的数字 */
            "0": {
              "handshake": 4,                   // 连接建立时的握手时间限制。单位为秒
              "connIdle": 300,                  // 连接空闲的时间限制。单位为秒
              "uplinkOnly": 2,                  // 当连接下行线路关闭后的时间限制。单位为秒。
              "downlinkOnly": 5,                // 当连接上行线路关闭后的时间限制。单位为秒。
              "statsUserUplink": false,         // 当值为true时，开启当前等级的所有用户的上行流量统计。
              "statsUserDownlink": false,       // 当值为true时，开启当前等级的所有用户的下行流量统计。
              "bufferSize": 10240               // 每个连接的内部缓存大小。单位为 kB。当值为0时，内部缓存被禁用。
            }
        },
        "system": {
            "statsInboundUplink": false, // 当值为true时，开启所有入站代理的上行流量统计。
            "statsInboundDownlink": false // 当值为true时，开启所有入站代理的下行流量统计。
        }
    },
    
    
    /** todo 用于反向代理 */
    "reverse": {
        /** 被代理主机，即没有公网 IP 的主机 */
        "bridges": [{
            "tag": "bridge",
            "domain": "test.v2ray.com"
        }],
        /** 代理主机，即有公网 IP 的主机 */
        "portals": [{
            "tag": "portal",
            "domain": "test.v2ray.com"
        }]    
    },
    
    
    /**todo 目前统计信息没有任何参数，只要StatsObject项存在，内部的统计即会开启。同时你还需要在 Policy 中开启对应的项，才可以统计对应的数据。 */
    "stats": {},
    
    
    /** todo 入站连接，接收从客户端或上级代理发送过来的数据 */
    "inbounds": [
        {
            "tag": "标识",
            
            /** 允许接入的 IP 地址： 默认值为"0.0.0.0"，表示接收所有网卡上的连接。除此之外，必须指定一个现有网卡的地址。 */
            "listen": "127.0.0.1",    
            
            /** 该入站连接监听的端口： 当只有一个端口时，V2Ray 会在此端口监听入站连接。当指定了一个端口范围时，取决于allocate设置。
             * 整型数值: 实际的端口号。
             * 环境变量: 以"env:"开头，后面是一个环境变量的名称，如"env:PORT"
             * 字符串: 可以是一个数值类型的字符串，如"1234"；或者一个数值范围，如"5-10"表示端口 5 到端口 10 这 6 个端口。
             * */
            "port": 1080,                   
            
            /** 端口分配配置 */
            "allocate": {
              "strategy": "always", // 端口分配策略。"always"表示总是分配所有已指定的端口，port中指定了多少个端口，V2Ray 就会监听这些端口。"random"表示随机开放端口，每隔refresh分钟在port范围中随机选取concurrency个端口来监听。
              "refresh": 5, // 随机端口刷新间隔，单位为分钟。最小值为2，建议值为5。这个属性仅当strategy = random时有效。
              "concurrency": 3  // 随机端口数量。最小值为1，最大值为port范围的三分之一。建议值为3。
            }
            
            /** 入站协议配置： 以下是支持的如站协议
             * dokodemo-door: 它可以监听一个本地端口，并把所有进入此端口的数据发送至指定服务器的一个端口，从而达到端口映射的效果
             * http
             * mtproto: 是一个 Telegram 专用的代理协议。在 V2Ray 中可使用一组入站出站代理来完成 Telegram 数据的代理任务。目前只支持转发到 Telegram 的 IPv4 地址
             * shadowsocks:
             * socks:
             * vmess
             * */
            "protocol": "协议名称",
            
            /** 协议配置： 根据不同的协议，有不同的配置 */
            "settings": {},
            
            /** 底层传输配置： 根据协议不同，有不同的配置 */
            "streamSettings": {},
            
            /** 尝试探测流量的类型 */
            "sniffing": {
              "enabled": false,
              "destOverride": ["http", "tls"]  // 当流量为指定类型时，按其中包括的目标地址重置当前连接的目标。
            },
            
            
        }
    ],
    
    
    /** todo 出站连接，向远程服务器或下级代理发送数据 */
    "outbounds": [
        {
            "tag": "标识",
            
            "protocol": "协议名称",
            
            "sendThrough": "0.0.0.0",   // 用于发送数据的 IP 地址，当主机有多个 IP 地址时有效，默认值为"0.0.0.0"
            
            /** todo 出站协议配置
             * blackhole: Blackhole（黑洞）是一个出站数据协议，它会阻碍所有数据的出站，配合路由（Routing）一起使用，可以达到禁止访问某些网站的效果。
             * dns: DNS 是一个出站协议，主要用于拦截和转发 DNS 查询。此出站协议只能接收 DNS 流量（包含基于 UDP 和 TCP 协议的查询），其它类型的流量会导致错误。
             * freedom: Freedom 是一个出站协议，可以用来向任意网络发送（正常的） TCP 或 UDP 数据。
             * mtproto:
             * shadowsocks:
             * socks: 标准 Socks 协议实现，兼容 Socks 4、Socks 4a 和 Socks 5。
             * vmess: 
             * */            
            "settings": {},
            
            "streamSettings": {},
            
            /** todo 出站代理配置。当出站代理生效时，此出站协议的streamSettings将不起作用 */
            "proxySettings": {
              "tag": "another-outbound-tag"  // 另一个出站协议的标识符
            },
            
            /** todo 多路复用配置： Mux 功能是在一条 TCP 连接上分发多个 TCP 连接的数据 */
            "mux": {
                "enabled": false,
                "concurrency": 8        // 复用在一条 TCP 连接上的请求数量
            }
        }
    ],
    
    
    /** todo 底层传输方式（transport）是当前 V2Ray 节点和其它节点对接的方式。 */
    "transport": {
        "tcpSettings": {
            "header":{
                "type": "http",
                "request": {
                    "version": "1.1",
                    "method": "GET",
                    "path": ["/"],
                    "headers": {
                        "Host": ["www.baidu.com", "www.bing.com"],
                        "User-Agent": [
                            "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
                            "Mozilla/5.0 (iPhone; CPU iPhone OS 10_0_2 like Mac OS X) AppleWebKit/601.1 (KHTML, like Gecko) CriOS/53.0.2785.109 Mobile/14A456 Safari/601.1.46"
                        ],
                        "Accept-Encoding": ["gzip, deflate"],
                        "Connection": ["keep-alive"],
                        "Pragma": "no-cache"
                    }
                },
                "response": {
                    "version": "1.1",
                    "status": "200",
                    "reason": "OK",
                    "headers": {
                        "Content-Type": ["application/octet-stream", "video/mpeg"],
                        "Transfer-Encoding": ["chunked"],
                        "Connection": ["keep-alive"],
                        "Pragma": "no-cache"
                    }
                }
            }
        },
        "kcpSettings": {
            "mtu": 1350,
            "tti": 20,
            "uplinkCapacity": 5,
            "downlinkCapacity": 20,
            "congestion": false,
            "readBufferSize": 1,
            "writeBufferSize": 1,
            "header": {
                "type": "none"
            }
        },
        "wsSettings": {
            "path": "/",
            "headers": {
                "Host": "v2ray.com"
            }
         },
        "httpSettings": {
            "host": ["v2ray.com"],
            "path": "/random/path"
        },
        "dsSettings": {
            "path": "/path/to/ds/file"
         },
        "quicSettings": {
            "security": "none",
            "key": "",
            "header": {
                "type": "none"
            }
        }
    }
}
